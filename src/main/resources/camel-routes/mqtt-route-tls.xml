<?xml version="1.0" encoding="utf-8" ?>
<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="cloud-client">
        <from uri="paho-mqtt5:{{cloud.rootTopic}}/#?brokerUrl={{cloud.brokerUrl}}&amp;qos=2&amp;userName={{cloud.username}}&amp;password={{cloud.password}}&amp;sslClientProps.com.ibm.ssl.keyStore={{cloud.keyStore}}&amp;sslClientProps.com.ibm.ssl.keyStorePassword={{cloud.keyStorePwd}}&amp;sslClientProps.com.ibm.ssl.trustStore={{cloud.trustStore}}&amp;sslClientProps.com.ibm.ssl.trustStorePassword={{cloud.trustStorePwd}}" />
        <onException id="cloud-client-error-handler" redeliveryPolicyRef="com.caracal.camel.policies.InfiniteRedeliveryPolicy">
            <exception>java.lang.Exception</exception>
            <redeliveryPolicy
                    logRetryAttempted="true"
                    retryAttemptedLogLevel="WARN"
                    maximumRedeliveries="-1"
                    redeliveryDelay="1000"
                    asyncDelayedRedelivery="true"
                    backOffMultiplier="1"
                    useExponentialBackOff="false"
                    maximumRedeliveryDelay="1000"/>
        </onException>
        <choice>
            <when>
                <simple>${header.CamelMqttTopic} contains 'req'</simple>
                <toD uri="caracal-mqtt:${headers.CamelMqttTopic.substring({{cloud.rootTopicPrefixLength}})}?brokerUrl={{server.brokerUrl}}&amp;userName={{server.username}}&amp;password={{server.password}}&amp;qos=2&amp;keyStore={{server.keyStore}}&amp;keyStorePassword={{server.keyStorePwd}}&amp;trustStore={{server.trustStore}}&amp;trustStorePassword={{server.trustStorePwd}}" />
            </when>
        </choice>
    </route>
    <route id="client-cloud">
        <from uri="paho-mqtt5:{{server.rootTopic}}/#?brokerUrl={{server.brokerUrl}}&amp;qos=2&amp;userName={{server.username}}&amp;password={{server.password}}&amp;sslClientProps.com.ibm.ssl.keyStore={{server.keyStore}}&amp;sslClientProps.com.ibm.ssl.keyStorePassword={{server.keyStorePwd}}&amp;sslClientProps.com.ibm.ssl.trustStore={{server.trustStore}}&amp;sslClientProps.com.ibm.ssl.trustStorePassword={{server.trustStorePwd}}" />
        <onException id="client-cloud-error-handler" redeliveryPolicyRef="com.caracal.camel.policies.InfiniteRedeliveryPolicy">
            <exception>java.lang.Exception</exception>
            <redeliveryPolicy
                    logRetryAttempted="true"
                    retryAttemptedLogLevel="WARN"
                    maximumRedeliveries="-1"
                    redeliveryDelay="1000"
                    asyncDelayedRedelivery="true"
                    backOffMultiplier="1"
                    useExponentialBackOff="false"
                    maximumRedeliveryDelay="1000"/>
        </onException>
            <choice>
                <when>
                    <simple>${header.CamelMqttTopic} !contains 'req' &amp;&amp; ${header.CamelMqttTopic} !contains 'rsp'</simple>
                    <toD uri="paho-mqtt5:{{cloud.rootTopicPrefix}}${headers.CamelMqttTopic}?brokerUrl={{cloud.brokerUrl}}&amp;qos=2&amp;userName={{cloud.username}}&amp;password={{cloud.password}}&amp;retained=true&amp;sslClientProps.com.ibm.ssl.keyStore={{cloud.keyStore}}&amp;sslClientProps.com.ibm.ssl.keyStorePassword={{cloud.keyStorePwd}}&amp;sslClientProps.com.ibm.ssl.trustStore={{cloud.trustStore}}&amp;sslClientProps.com.ibm.ssl.trustStorePassword={{cloud.trustStorePwd}}" />
                </when>
                <when>
                    <simple>${header.CamelMqttTopic} !contains 'req'</simple>
                    <toD uri="paho-mqtt5:{{cloud.rootTopicPrefix}}${headers.CamelMqttTopic}?brokerUrl={{cloud.brokerUrl}}&amp;qos=2&amp;userName={{cloud.username}}&amp;password={{cloud.password}}&amp;sslClientProps.com.ibm.ssl.keyStore={{cloud.keyStore}}&amp;sslClientProps.com.ibm.ssl.keyStorePassword={{cloud.keyStorePwd}}&amp;sslClientProps.com.ibm.ssl.trustStore={{cloud.trustStore}}&amp;sslClientProps.com.ibm.ssl.trustStorePassword={{cloud.trustStorePwd}}" />
                </when>
            </choice>

    </route>

    <!--
    <route id="retryRoute">
        <from uri="direct:processMessage"/>
        <doTry>
            <to uri="bean:messageProcessor"/>
            <doCatch>
                <exception>java.lang.Exception</exception>
                <maximumRedeliveries>-1</maximumRedeliveries>
                <delay pattern="constant" delay="1000"/>
            </doCatch>
        </doTry>
    </route>
    -->
</routes>


